// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PlanCreated extends ethereum.Event {
  get params(): PlanCreated__Params {
    return new PlanCreated__Params(this);
  }
}

export class PlanCreated__Params {
  _event: PlanCreated;

  constructor(event: PlanCreated) {
    this._event = event;
  }

  get plan(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get price(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get duration(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SubscriptionCancelled extends ethereum.Event {
  get params(): SubscriptionCancelled__Params {
    return new SubscriptionCancelled__Params(this);
  }
}

export class SubscriptionCancelled__Params {
  _event: SubscriptionCancelled;

  constructor(event: SubscriptionCancelled) {
    this._event = event;
  }

  get subscriber(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SubscriptionCharged extends ethereum.Event {
  get params(): SubscriptionCharged__Params {
    return new SubscriptionCharged__Params(this);
  }
}

export class SubscriptionCharged__Params {
  _event: SubscriptionCharged;

  constructor(event: SubscriptionCharged) {
    this._event = event;
  }

  get subscriber(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get plan(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get nextCharge(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SubscriptionCreated extends ethereum.Event {
  get params(): SubscriptionCreated__Params {
    return new SubscriptionCreated__Params(this);
  }
}

export class SubscriptionCreated__Params {
  _event: SubscriptionCreated;

  constructor(event: SubscriptionCreated) {
    this._event = event;
  }

  get subscriber(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get plan(): i32 {
    return this._event.parameters[1].value.toI32();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PaymentSubscription__plansResult {
  value0: i32;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: i32, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getPlan(): i32 {
    return this.value0;
  }

  getPrice(): BigInt {
    return this.value1;
  }

  getDuration(): BigInt {
    return this.value2;
  }
}

export class PaymentSubscription__subscriptionsResult {
  value0: i32;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: boolean;

  constructor(
    value0: i32,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    return map;
  }

  getPlan(): i32 {
    return this.value0;
  }

  getPrice(): BigInt {
    return this.value1;
  }

  getStartDate(): BigInt {
    return this.value2;
  }

  getEndDate(): BigInt {
    return this.value3;
  }

  getNextCharge(): BigInt {
    return this.value4;
  }

  getActive(): boolean {
    return this.value5;
  }
}

export class PaymentSubscription extends ethereum.SmartContract {
  static bind(address: Address): PaymentSubscription {
    return new PaymentSubscription("PaymentSubscription", address);
  }

  activeSubscriptions(param0: Address): boolean {
    let result = super.call(
      "activeSubscriptions",
      "activeSubscriptions(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_activeSubscriptions(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "activeSubscriptions",
      "activeSubscriptions(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  plans(param0: i32): PaymentSubscription__plansResult {
    let result = super.call("plans", "plans(uint8):(uint8,uint256,uint256)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))
    ]);

    return new PaymentSubscription__plansResult(
      result[0].toI32(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_plans(
    param0: i32
  ): ethereum.CallResult<PaymentSubscription__plansResult> {
    let result = super.tryCall(
      "plans",
      "plans(uint8):(uint8,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PaymentSubscription__plansResult(
        value[0].toI32(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  subscriptionToken(): Address {
    let result = super.call(
      "subscriptionToken",
      "subscriptionToken():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_subscriptionToken(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "subscriptionToken",
      "subscriptionToken():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  subscriptions(param0: Address): PaymentSubscription__subscriptionsResult {
    let result = super.call(
      "subscriptions",
      "subscriptions(address):(uint8,uint256,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new PaymentSubscription__subscriptionsResult(
      result[0].toI32(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBoolean()
    );
  }

  try_subscriptions(
    param0: Address
  ): ethereum.CallResult<PaymentSubscription__subscriptionsResult> {
    let result = super.tryCall(
      "subscriptions",
      "subscriptions(address):(uint8,uint256,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PaymentSubscription__subscriptionsResult(
        value[0].toI32(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBoolean()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _subscriptionToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ChargeCall extends ethereum.Call {
  get inputs(): ChargeCall__Inputs {
    return new ChargeCall__Inputs(this);
  }

  get outputs(): ChargeCall__Outputs {
    return new ChargeCall__Outputs(this);
  }
}

export class ChargeCall__Inputs {
  _call: ChargeCall;

  constructor(call: ChargeCall) {
    this._call = call;
  }

  get subscriber(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChargeCall__Outputs {
  _call: ChargeCall;

  constructor(call: ChargeCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SubscribeCall extends ethereum.Call {
  get inputs(): SubscribeCall__Inputs {
    return new SubscribeCall__Inputs(this);
  }

  get outputs(): SubscribeCall__Outputs {
    return new SubscribeCall__Outputs(this);
  }
}

export class SubscribeCall__Inputs {
  _call: SubscribeCall;

  constructor(call: SubscribeCall) {
    this._call = call;
  }

  get _plan(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get duration(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class SubscribeCall__Outputs {
  _call: SubscribeCall;

  constructor(call: SubscribeCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawSubscriptionTokenCall extends ethereum.Call {
  get inputs(): WithdrawSubscriptionTokenCall__Inputs {
    return new WithdrawSubscriptionTokenCall__Inputs(this);
  }

  get outputs(): WithdrawSubscriptionTokenCall__Outputs {
    return new WithdrawSubscriptionTokenCall__Outputs(this);
  }
}

export class WithdrawSubscriptionTokenCall__Inputs {
  _call: WithdrawSubscriptionTokenCall;

  constructor(call: WithdrawSubscriptionTokenCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawSubscriptionTokenCall__Outputs {
  _call: WithdrawSubscriptionTokenCall;

  constructor(call: WithdrawSubscriptionTokenCall) {
    this._call = call;
  }
}
